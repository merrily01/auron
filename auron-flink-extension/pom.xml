<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache.auron</groupId>
    <artifactId>auron-parent_${scalaVersion}</artifactId>
    <version>${project.version}</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>auron-flink-extension</artifactId>
  <packaging>jar</packaging>
  <name>Apache Auron Flink ${flink.version}</name>
  <description>Apache Auron Flink Project</description>

  <properties>
    <flink.markBundledAsOptional>false</flink.markBundledAsOptional>
    <janino.version>3.1.10</janino.version>
    <guava.version>31.1-jre</guava.version>
    <scala.binary.version>2.12</scala.binary.version>
    <surefire.module.config>
      <!--
                  HashAggCodeGeneratorTest / AggTestBase
                  -->
      --add-opens=java.base/java.lang=ALL-UNNAMED
      <!--
                  chill ArraysAsListSerializer
                  -->
      --add-opens=java.base/java.util=ALL-UNNAMED
      <!--
                  kryo AtomicBoolean
                  -->
      --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
      <!--
                  kryo LocalDate/ZoneOffset
                  -->
      --add-opens=java.base/java.time=ALL-UNNAMED
      <!--
                  kryo MathContext
                  -->
      --add-opens=java.base/java.math=ALL-UNNAMED
      <!--
                  kryo ByteBuffer
                  -->
      --add-opens=java.base/java.nio=ALL-UNNAMED
    </surefire.module.config>
  </properties>

  <dependencies>
    <!-- Auron dependencies -->
    <dependency>
      <groupId>org.apache.auron</groupId>
      <artifactId>auron-core</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.auron</groupId>
      <artifactId>proto</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scalaLongVersion}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.immutables</groupId>
      <artifactId>value</artifactId>
      <version>2.8.8</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.immutables</groupId>
      <artifactId>value-annotations</artifactId>
      <version>2.8.8</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.codehaus.janino</groupId>
      <artifactId>commons-compiler</artifactId>
      <version>${janino.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <!-- Used for code generation -->
      <groupId>org.codehaus.janino</groupId>
      <artifactId>janino</artifactId>
      <version>${janino.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Table API Java dependencies (not included in the uber) -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-api-java-bridge</artifactId>
      <version>${flink.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Flink Scala (included only in the loader-bundle) -->

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-scala_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker-qual</artifactId>
      <version>3.12.0</version>
      <scope>provided</scope>
      <optional>${flink.markBundledAsOptional}</optional>
    </dependency>

    <!-- Table planner -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-planner_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <!-- Table Runtime (not included in the uber) -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-runtime</artifactId>
      <version>${flink.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Table Calcite Bridge (included in the uber) -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-calcite-bridge</artifactId>
      <version>${flink.version}</version>
      <scope>provided</scope>
      <optional>${flink.markBundledAsOptional}</optional>
      <exclusions>
        <exclusion>
          <groupId>org.apache.calcite</groupId>
          <artifactId>calcite-core</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-planner_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-test-utils</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Table API Scala dependencies -->

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-api-scala_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-api-scala-bridge_${scala.binary.version}</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-core</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-common</artifactId>
      <version>${flink.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-api-java</artifactId>
      <version>${flink.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-runtime</artifactId>
      <version>${flink.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-streaming-java</artifactId>
      <version>${flink.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-statebackend-rocksdb</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <!-- For using the filesystem connector in tests -->
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-connector-files</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- arrow dependency -->
    <dependency>
      <groupId>org.apache.arrow</groupId>
      <artifactId>arrow-c-data</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.arrow</groupId>
      <artifactId>arrow-compression</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.arrow</groupId>
      <artifactId>arrow-memory-unsafe</artifactId>
    </dependency>

    <dependency>
      <groupId>org.apache.arrow</groupId>
      <artifactId>arrow-vector</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.plugin.surefire.version}</version>
        <!-- Note config is repeated in scalatest config -->
        <configuration>
          <skipTests>${skipTests}</skipTests>
          <includes>
            <include>**/*ITCase.java</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
