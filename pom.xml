<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.apache</groupId>
    <artifactId>apache</artifactId>
    <version>35</version>
  </parent>

  <groupId>org.apache.auron</groupId>
  <artifactId>auron-parent_${scalaVersion}</artifactId>
  <version>${project.version}</version>
  <packaging>pom</packaging>

  <name>Apache Auron Parent Pom</name>
  <description>Apache Auron (incubating)</description>
  <url>https://github.com/apache/auron.git</url>

  <modules>
    <module>auron-core</module>
    <module>common</module>
    <module>spark-version-annotation-macros</module>
    <module>spark-extension</module>
    <module>${shimPkg}</module>
    <module>hadoop-shim</module>
    <module>dev/mvn-build-helper/assembly</module>
    <module>dev/mvn-build-helper/proto</module>
    <module>auron-spark-ui</module>
  </modules>

  <properties>
    <project.version>7.0.0-SNAPSHOT</project.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <arrowVersion>16.0.0</arrowVersion>
    <bytebuddyVersion>1.14.11</bytebuddyVersion>
    <hadoopVersion>3.4.2</hadoopVersion>
    <protobufVersion>3.25.5</protobufVersion>

    <javaVersion>8</javaVersion>
    <scalaVersion>2.12</scalaVersion>
    <scalaLongVersion>2.12.18</scalaLongVersion>
    <scalaJava8CompatVersion>1.0.2</scalaJava8CompatVersion>
    <maven.version>3.9.11</maven.version>
    <maven.plugin.scala.version>4.9.2</maven.plugin.scala.version>
    <maven.plugin.scalatest.version>2.2.0</maven.plugin.scalatest.version>
    <maven.plugin.scalatest.exclude.tags />
    <maven.plugin.scalatest.include.tags />
    <maven.plugin.scalatest.debug.enabled>false</maven.plugin.scalatest.debug.enabled>
    <maven.plugin.surefire.version>3.5.3</maven.plugin.surefire.version>
    <maven.plugin.shade.version>3.5.2</maven.plugin.shade.version>
    <os-maven-plugin.version>1.7.1</os-maven-plugin.version>
    <maven.plugin.templating.version>3.0.0</maven.plugin.templating.version>
    <maven-enforcer-plugin.version>3.5.0</maven-enforcer-plugin.version>

    <scalamacros.paradise.version>2.1.1</scalamacros.paradise.version>
    <junit.jupiter.version>5.13.4</junit.jupiter.version>
    <restrict-imports.enforcer.version>2.6.0</restrict-imports.enforcer.version>

    <extraJavaTestArgs>-XX:+IgnoreUnrecognizedVMOptions
      --add-opens=java.base/java.lang=ALL-UNNAMED
      --add-opens=java.base/java.lang.invoke=ALL-UNNAMED
      --add-opens=java.base/java.lang.reflect=ALL-UNNAMED
      --add-opens=java.base/java.io=ALL-UNNAMED
      --add-opens=java.base/java.net=ALL-UNNAMED
      --add-opens=java.base/java.nio=ALL-UNNAMED
      --add-opens=java.base/java.util=ALL-UNNAMED
      --add-opens=java.base/java.util.concurrent=ALL-UNNAMED
      --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED
      --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED
      --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
      --add-opens=java.base/sun.nio.cs=ALL-UNNAMED
      --add-opens=java.base/sun.security.action=ALL-UNNAMED
      --add-opens=java.base/sun.security.tools.keytool=ALL-UNNAMED
      --add-opens=java.base/sun.security.x509=ALL-UNNAMED
      --add-opens=java.base/sun.util.calendar=ALL-UNNAMED
      -Djdk.reflect.useDirectMethodHandle=false
      -Dio.netty.tryReflectionSetAccessible=true</extraJavaTestArgs>

    <debugArgLine>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</debugArgLine>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-library</artifactId>
        <version>${scalaLongVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-compiler</artifactId>
        <version>${scalaLongVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-reflect</artifactId>
        <version>${scalaLongVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.scala-lang.modules</groupId>
        <artifactId>scala-java8-compat_${scalaVersion}</artifactId>
        <version>${scalaJava8CompatVersion}</version>
        <exclusions>
          <exclusion>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-core_${scalaVersion}</artifactId>
        <version>${sparkVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-hive_${scalaVersion}</artifactId>
        <version>${sparkVersion}</version>
        <exclusions>
          <exclusion>
            <groupId>org.apache.arrow</groupId>
            <artifactId>*</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-sql_${scalaVersion}</artifactId>
        <version>${sparkVersion}</version>
        <exclusions>
          <exclusion>
            <groupId>org.apache.arrow</groupId>
            <artifactId>*</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-client-api</artifactId>
        <version>${hadoopVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-client-runtime</artifactId>
        <version>${hadoopVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.paimon</groupId>
        <artifactId>paimon-core</artifactId>
        <version>${paimonVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.arrow</groupId>
        <artifactId>arrow-c-data</artifactId>
        <version>${arrowVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.arrow</groupId>
        <artifactId>arrow-compression</artifactId>
        <version>${arrowVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.arrow</groupId>
        <artifactId>arrow-memory-unsafe</artifactId>
        <version>${arrowVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.arrow</groupId>
        <artifactId>arrow-vector</artifactId>
        <version>${arrowVersion}</version>
      </dependency>
      <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-java</artifactId>
        <version>${protobufVersion}</version>
      </dependency>
      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy</artifactId>
        <version>${bytebuddyVersion}</version>
      </dependency>
      <dependency>
        <groupId>net.bytebuddy</groupId>
        <artifactId>byte-buddy-agent</artifactId>
        <version>${bytebuddyVersion}</version>
      </dependency>

      <dependency>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest_${scalaVersion}</artifactId>
        <version>${scalaTestVersion}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-core_${scalaVersion}</artifactId>
        <version>${sparkVersion}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-catalyst_${scalaVersion}</artifactId>
        <version>${sparkVersion}</version>
        <type>test-jar</type>
        <scope>test</scope>
        <exclusions>
          <exclusion>
            <groupId>org.apache.arrow</groupId>
            <artifactId>arrow-memory-netty</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-sql_${scalaVersion}</artifactId>
        <version>${sparkVersion}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-compiler</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-reflect</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scalaVersion}</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- compile java -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.14.1</version>
        <configuration>
          <source>${javaVersion}</source>
          <target>${javaVersion}</target>
        </configuration>
      </plugin>

      <!-- compile scala -->
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>${maven.plugin.scala.version}</version>
        <configuration>
          <source>${javaVersion}</source>
          <target>${javaVersion}</target>
          <scalaVersion>${scalaLongVersion}</scalaVersion>
          <args>
            <arg>-Ywarn-unused</arg>
          </args>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>2.0.2</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>scala-compile-first</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <phase>process-resources</phase>
          </execution>
          <execution>
            <id>scala-test-compile</id>
            <goals>
              <goal>testCompile</goal>
            </goals>
            <phase>process-test-resources</phase>
          </execution>
        </executions>
      </plugin>

      <!-- disable surefire globally, only enable it on pure Java modules -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.plugin.surefire.version}</version>
        <!-- Note config is repeated in scalatest config -->
        <configuration>
          <skipTests>false</skipTests>
          <failIfNoSpecifiedTests>false</failIfNoSpecifiedTests>
          <argLine>${extraJavaTestArgs}</argLine>
          <environmentVariables />
          <systemPropertyVariables>
            <java.io.tmpdir>${project.build.directory}/tmp</java.io.tmpdir>
            <spark.driver.memory>1g</spark.driver.memory>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <!-- enable scalatest -->
      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <version>${maven.plugin.scalatest.version}</version>
        <!-- Note config is repeated in surefire config -->
        <configuration>
          <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
          <junitxml>.</junitxml>
          <filereports>TestSuite.txt</filereports>
          <argLine>${extraJavaTestArgs}</argLine>
          <environmentVariables />
          <systemProperties>
            <java.io.tmpdir>${project.build.directory}/tmp</java.io.tmpdir>
            <spark.driver.memory>1g</spark.driver.memory>
          </systemProperties>
          <tagsToExclude>${maven.plugin.scalatest.exclude.tags}</tagsToExclude>
          <tagsToInclude>${maven.plugin.scalatest.include.tags}</tagsToInclude>
          <debugForkedProcess>${maven.plugin.scalatest.debug.enabled}</debugForkedProcess>
          <debugArgLine>${debugArgLine}</debugArgLine>
        </configuration>
        <executions>
          <execution>
            <id>test</id>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- directory plugin -->
      <plugin>
        <groupId>org.commonjava.maven.plugins</groupId>
        <artifactId>directory-maven-plugin</artifactId>
        <version>0.1</version>
        <executions>
          <execution>
            <id>directories</id>
            <goals>
              <goal>highest-basedir</goal>
            </goals>
            <phase>initialize</phase>
            <configuration>
              <property>rootDir</property>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- spotless -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless.plugin.version}</version>
        <configuration>
          <java>
            <palantirJavaFormat />
            <removeUnusedImports />
            <licenseHeader>
              <file>${maven.multiModuleProjectDirectory}/dev/license-header</file>
            </licenseHeader>
          </java>
          <scala>
            <scalafmt>
              <version>${scalafmtVersion}</version>
              <file>${maven.multiModuleProjectDirectory}/scalafmt.conf</file>
              <scalaMajorVersion>${scalaVersion}</scalaMajorVersion>
            </scalafmt>
            <licenseHeader>
              <file>${maven.multiModuleProjectDirectory}/dev/license-header</file>
            </licenseHeader>
          </scala>
          <pom>
            <sortPom>
              <encoding>UTF-8</encoding>
              <lineSeparator>${line.separator}</lineSeparator>
              <expandEmptyElements>false</expandEmptyElements>
              <spaceBeforeCloseEmptyElement>true</spaceBeforeCloseEmptyElement>
              <keepBlankLines>true</keepBlankLines>
              <nrOfIndentSpace>2</nrOfIndentSpace>
              <indentBlankLines>false</indentBlankLines>
              <indentSchemaLocation>false</indentSchemaLocation>
              <predefinedSortOrder>recommended_2008_06</predefinedSortOrder>
              <sortOrderFile />
              <sortDependencies />
              <sortDependencyExclusions />
              <sortPlugins />
              <sortProperties>false</sortProperties>
              <sortModules>false</sortModules>
              <sortExecutions>false</sortExecutions>
            </sortPom>
          </pom>
        </configuration>
        <executions>
          <execution>
            <id>scalafix</id>
            <goals>
              <goal>apply</goal>
            </goals>
            <phase>validate</phase>
          </execution>
        </executions>
      </plugin>

      <!-- scalafix -->
      <plugin>
        <groupId>io.github.evis</groupId>
        <artifactId>scalafix-maven-plugin_${scalaVersion}</artifactId>
        <version>0.1.4_0.9.31</version>
        <configuration>
          <config>${maven.multiModuleProjectDirectory}/scalafix.conf</config>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>com.nequissimus</groupId>
            <artifactId>sort-imports_${scalaVersion}</artifactId>
            <version>0.6.1</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>scalafix</id>
            <goals>
              <goal>scalafix</goal>
            </goals>
            <phase>prepare-package</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.rat</groupId>
        <artifactId>apache-rat-plugin</artifactId>
        <inherited>true</inherited>
        <configuration>
          <excludeSubProjects>false</excludeSubProjects>
          <numUnapprovedLicenses>0</numUnapprovedLicenses>
          <licenseFamilies>
            <licenseFamily implementation="org.apache.rat.license.SimpleLicenseFamily">
              <familyName>Apache License 2.0</familyName>
            </licenseFamily>
          </licenseFamilies>
          <excludesFile>.rat-excludes</excludesFile>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>verify</phase>
          </execution>
        </executions>
      </plugin>

      <!-- Configuring maven-enforcer-plugin to enforce Maven/Java versions and restrict imports -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven-enforcer-plugin.version}</version>
        <configuration>
          <rules>
            <requireMavenVersion>
              <version>[3.0.2,)</version>
            </requireMavenVersion>
            <requireJavaVersion>
              <version>[1.8,)</version>
            </requireJavaVersion>
          </rules>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>de.skuzzle.enforcer</groupId>
            <artifactId>restrict-imports-enforcer-rule</artifactId>
            <version>${restrict-imports.enforcer.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>banned-illegal-imports</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <phase>process-sources</phase>
            <configuration>
              <rules>
                <restrictImports>
                  <includeTestCode>true</includeTestCode>
                  <reason>Use JUnit5</reason>
                  <bannedImports>
                    <bannedImport>org.junit.**</bannedImport>
                  </bannedImports>
                  <allowedImports>
                    <allowedImport>org.junit.jupiter.**</allowedImport>
                    <allowedImport>org.junit.platform.**</allowedImport>
                  </allowedImports>
                </restrictImports>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>release</id>
      <properties>
        <releaseMode>release</releaseMode>
        <buildNativeWithRelease>true</buildNativeWithRelease>
        <buildWithFeatures />
      </properties>
    </profile>

    <profile>
      <id>release-with-jemalloc-pprof</id>
      <properties>
        <releaseMode>release</releaseMode>
        <buildNativeWithRelease>true</buildNativeWithRelease>
        <buildWithFeatures>jemalloc-pprof</buildWithFeatures>
      </properties>
    </profile>

    <profile>
      <id>pre</id>
      <properties>
        <releaseMode>pre</releaseMode>
        <buildNativeWithRelease>false</buildNativeWithRelease>
        <buildWithFeatures />
      </properties>
    </profile>

    <profile>
      <id>spark-3.0</id>
      <properties>
        <shimName>spark-3.0</shimName>
        <shimPkg>spark-extension-shims-spark</shimPkg>
        <scalaTestVersion>3.0.8</scalaTestVersion>
        <sparkVersion>3.0.3</sparkVersion>
      </properties>
    </profile>

    <profile>
      <id>spark-3.1</id>
      <properties>
        <shimName>spark-3.1</shimName>
        <shimPkg>spark-extension-shims-spark</shimPkg>
        <scalaTestVersion>3.2.9</scalaTestVersion>
        <sparkVersion>3.1.3</sparkVersion>
      </properties>
    </profile>

    <profile>
      <id>spark-3.2</id>
      <properties>
        <shimName>spark-3.2</shimName>
        <shimPkg>spark-extension-shims-spark</shimPkg>
        <scalaTestVersion>3.2.9</scalaTestVersion>
        <sparkVersion>3.2.4</sparkVersion>
      </properties>
    </profile>

    <profile>
      <id>spark-3.3</id>
      <properties>
        <shimName>spark-3.3</shimName>
        <shimPkg>spark-extension-shims-spark</shimPkg>
        <scalaTestVersion>3.2.9</scalaTestVersion>
        <sparkVersion>3.3.4</sparkVersion>
      </properties>
    </profile>

    <profile>
      <id>spark-3.4</id>
      <properties>
        <shimName>spark-3.4</shimName>
        <shimPkg>spark-extension-shims-spark</shimPkg>
        <scalaTestVersion>3.2.9</scalaTestVersion>
        <sparkVersion>3.4.4</sparkVersion>
      </properties>
    </profile>

    <profile>
      <id>spark-3.5</id>
      <properties>
        <shimName>spark-3.5</shimName>
        <shimPkg>spark-extension-shims-spark</shimPkg>
        <scalaTestVersion>3.2.9</scalaTestVersion>
        <sparkVersion>3.5.7</sparkVersion>
      </properties>
    </profile>

    <profile>
      <id>jdk-8</id>
      <activation>
        <jdk>1.8</jdk>
      </activation>
      <properties>
        <javaVersion>8</javaVersion>
        <spotless.plugin.version>2.30.0</spotless.plugin.version>
        <semanticdb.version>4.8.8</semanticdb.version>
        <scalafmtVersion>3.0.0</scalafmtVersion>
      </properties>
    </profile>

    <profile>
      <id>jdk-11</id>
      <activation>
        <jdk>11</jdk>
      </activation>
      <properties>
        <javaVersion>11</javaVersion>
        <spotless.plugin.version>2.30.0</spotless.plugin.version>
        <semanticdb.version>4.8.8</semanticdb.version>
        <scalafmtVersion>3.0.0</scalafmtVersion>
      </properties>
    </profile>

    <profile>
      <id>jdk-17</id>
      <activation>
        <jdk>17</jdk>
      </activation>
      <properties>
        <javaVersion>17</javaVersion>
        <spotless.plugin.version>2.45.0</spotless.plugin.version>
        <semanticdb.version>4.9.9</semanticdb.version>
        <scalafmtVersion>3.9.9</scalafmtVersion>
      </properties>
    </profile>

    <profile>
      <id>jdk-21</id>
      <activation>
        <jdk>21</jdk>
      </activation>
      <properties>
        <javaVersion>21</javaVersion>
        <spotless.plugin.version>2.45.0</spotless.plugin.version>
        <semanticdb.version>4.9.9</semanticdb.version>
        <scalafmtVersion>3.9.9</scalafmtVersion>
      </properties>
    </profile>

    <profile>
      <id>scala-2.12</id>
      <activation>
        <property>
          <name>scalaVersion</name>
          <value>2.12</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>scala-maven-plugin</artifactId>
            <configuration>
              <compilerPlugins>
                <compilerPlugin>
                  <groupId>org.scalameta</groupId>
                  <artifactId>semanticdb-scalac_${scalaLongVersion}</artifactId>
                  <version>${semanticdb.version}</version>
                </compilerPlugin>
                <compilerPlugin>
                  <groupId>org.scalamacros</groupId>
                  <artifactId>paradise_${scalaLongVersion}</artifactId>
                  <version>${scalamacros.paradise.version}</version>
                </compilerPlugin>
              </compilerPlugins>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>scala-2.13</id>
      <activation>
        <property>
          <name>scalaVersion</name>
          <value>2.13</value>
        </property>
      </activation>
      <properties>
        <scalaVersion>2.13</scalaVersion>
        <scalaLongVersion>2.13.13</scalaLongVersion>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>net.alchim31.maven</groupId>
            <artifactId>scala-maven-plugin</artifactId>
            <configuration>
              <args>
                <arg>-Ywarn-unused</arg>
                <!-- https://github.com/scalamacros/paradise is no longer actively developed. -->
                <!-- In Scala 2.13, the plugin's functionality has been included in the compiler -->
                <!-- directly under the -Ymacro-annotations flag.  -->
                <arg>-Ymacro-annotations</arg>
              </args>
              <compilerPlugins>
                <compilerPlugin>
                  <groupId>org.scalameta</groupId>
                  <artifactId>semanticdb-scalac_${scalaLongVersion}</artifactId>
                  <version>${semanticdb.version}</version>
                </compilerPlugin>
              </compilerPlugins>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>celeborn-0.5</id>
      <modules>
        <module>thirdparty/auron-celeborn-0.5</module>
      </modules>
      <properties>
        <celebornVersion>0.5.4</celebornVersion>
      </properties>
    </profile>

    <profile>
      <id>celeborn-0.6</id>
      <modules>
        <module>thirdparty/auron-celeborn-0.6</module>
      </modules>
      <properties>
        <celebornVersion>0.6.1</celebornVersion>
      </properties>
    </profile>

    <profile>
      <id>uniffle-0.10</id>
      <modules>
        <module>thirdparty/auron-uniffle</module>
      </modules>
      <properties>
        <uniffleVersion>0.10.0</uniffleVersion>
      </properties>
    </profile>

    <profile>
      <id>paimon-1.2</id>
      <modules>
        <module>thirdparty/auron-paimon</module>
      </modules>
      <properties>
        <paimonVersion>1.2.0</paimonVersion>
      </properties>
    </profile>

    <profile>
      <id>flink-1.18</id>
      <modules>
        <module>auron-flink-extension</module>
      </modules>
      <properties>
        <flink.version>1.18.1</flink.version>
      </properties>
    </profile>
  </profiles>
</project>
